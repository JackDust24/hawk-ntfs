"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[94],{86094:function(i,n,e){e.d(n,{OpenloginAdapter:function(){return d},getOpenloginDefaultOptions:function(){return l}});var t=e(3388),o=e(41436),r=e(81180),s=e(72378),a=e.n(s),c=e(2043),h=e.n(c);let l=(i,n)=>({adapterSettings:{network:t.dr.MAINNET,clientId:"",uxMode:t.$e.POPUP},chainConfig:i?(0,o.h2)(i,n):void 0,loginSettings:{relogin:!0}});function p(i,n){var e=Object.keys(i);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(i);n&&(t=t.filter(function(n){return Object.getOwnPropertyDescriptor(i,n).enumerable})),e.push.apply(e,t)}return e}function g(i){for(var n=1;n<arguments.length;n++){var e=null!=arguments[n]?arguments[n]:{};n%2?p(Object(e),!0).forEach(function(n){(0,r.Z)(i,n,e[n])}):Object.getOwnPropertyDescriptors?Object.defineProperties(i,Object.getOwnPropertyDescriptors(e)):p(Object(e)).forEach(function(n){Object.defineProperty(i,n,Object.getOwnPropertyDescriptor(e,n))})}return i}class d extends o.J5{constructor(i){var n,e,s,a;super(),(0,r.Z)(this,"name",o.rW.OPENLOGIN),(0,r.Z)(this,"adapterNamespace",o.yk.MULTICHAIN),(0,r.Z)(this,"type",o.hN.IN_APP),(0,r.Z)(this,"openloginInstance",null),(0,r.Z)(this,"status",o.MP.NOT_READY),(0,r.Z)(this,"currentChainNamespace",o.EN.EIP155),(0,r.Z)(this,"openloginOptions",void 0),(0,r.Z)(this,"loginSettings",{}),(0,r.Z)(this,"privKeyProvider",null),h().debug("const openlogin adapter",i);let c=l(null===(n=i.chainConfig)||void 0===n?void 0:n.chainNamespace,null===(e=i.chainConfig)||void 0===e?void 0:e.chainId);if(this.openloginOptions=g(g({clientId:"",network:t.dr.MAINNET},c.adapterSettings),i.adapterSettings||{}),this.loginSettings=g(g({},c.loginSettings),i.loginSettings),null!==(s=i.chainConfig)&&void 0!==s&&s.chainNamespace){this.currentChainNamespace=null===(a=i.chainConfig)||void 0===a?void 0:a.chainNamespace;let n=c.chainConfig?c.chainConfig:{};if(this.chainConfig=g(g({},n),null==i?void 0:i.chainConfig),h().debug("const openlogin chainConfig",this.chainConfig),!this.chainConfig.rpcTarget)throw o.Ty.invalidParams("rpcTarget is required in chainConfig")}}get chainConfigProxy(){return this.chainConfig?g({},this.chainConfig):null}get provider(){var i;return(null===(i=this.privKeyProvider)||void 0===i?void 0:i.provider)||null}set provider(i){throw Error("Not implemented")}async init(i){var n;if(super.checkInitializationRequirements(),!(null!==(n=this.openloginOptions)&&void 0!==n&&n.clientId))throw o.Ty.invalidParams("clientId is required before openlogin's initialization");if(!this.chainConfig)throw o.Ty.invalidParams("chainConfig is required before initialization");this.openloginInstance=new t.ZP(this.openloginOptions);let e=(0,t.Gv)(),r=!0;Object.keys(e).length>0&&e.result&&(r=!0),await this.openloginInstance.init(),this.status=o.MP.READY,this.emit(o.n2.READY,o.rW.OPENLOGIN);try{this.openloginInstance.privKey&&(i.autoConnect||r)&&await this.connect()}catch(i){h().error("Failed to connect with cached openlogin provider",i),this.emit("ERRORED",i)}}async connect(i){super.checkConnectionRequirements(),this.status=o.MP.CONNECTING,this.emit(o.n2.CONNECTING,g(g({},i),{},{adapter:o.rW.OPENLOGIN}));try{return await this.connectWithProvider(i),this.provider}catch(i){if(h().error("Failed to connect with openlogin provider",i),this.status=o.MP.READY,this.emit(o.n2.ERRORED,i),null!=i&&i.message.includes("user closed popup"))throw o.RM.popupClosed();throw o.RM.connectionError("Failed to login with openlogin")}}async disconnect(){let i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};if(this.status!==o.MP.CONNECTED)throw o.RM.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw o.Ty.notReady("openloginInstance is not ready");await this.openloginInstance.logout(),i.cleanup?(this.status=o.MP.NOT_READY,this.openloginInstance=null,this.privKeyProvider=null):this.status=o.MP.READY,this.emit(o.n2.DISCONNECTED)}async getUserInfo(){if(this.status!==o.MP.CONNECTED)throw o.RM.notConnectedError("Not connected with wallet");if(!this.openloginInstance)throw o.Ty.notReady("openloginInstance is not ready");return await this.openloginInstance.getUserInfo()}setAdapterSettings(i){if(this.status===o.MP.READY)return;let n=l();this.openloginOptions=g(g(g({},n.adapterSettings),this.openloginOptions||{}),i)}setChainConfig(i){super.setChainConfig(i),this.currentChainNamespace=i.chainNamespace}async connectWithProvider(i){if(!this.chainConfig)throw o.Ty.invalidParams("chainConfig is required before initialization");if(!this.openloginInstance)throw o.Ty.notReady("openloginInstance is not ready");if(this.currentChainNamespace===o.EN.SOLANA){let{SolanaPrivateKeyProvider:i}=await Promise.all([e.e(662),e.e(766),e.e(796),e.e(845),e.e(108),e.e(458),e.e(833)]).then(e.bind(e,44445));this.privKeyProvider=new i({config:{chainConfig:this.chainConfig}})}else if(this.currentChainNamespace===o.EN.EIP155){let{EthereumPrivateKeyProvider:i}=await Promise.all([e.e(662),e.e(482),e.e(796),e.e(845),e.e(62),e.e(438)]).then(e.bind(e,52062));this.privKeyProvider=new i({config:{chainConfig:this.chainConfig}})}else throw Error("Invalid chainNamespace: ".concat(this.currentChainNamespace," found while connecting to wallet"));!this.openloginInstance.privKey&&i&&await this.openloginInstance.login(a()(this.loginSettings,{loginProvider:i.loginProvider},{extraLoginOptions:{login_hint:null==i?void 0:i.login_hint}}));let n=this.openloginInstance.privKey;if(n){if(this.currentChainNamespace===o.EN.SOLANA){let{getED25519Key:i}=await Promise.all([e.e(108),e.e(418)]).then(e.bind(e,33946));n=i(n).sk.toString("hex")}await this.privKeyProvider.setupProvider(n),this.status=o.MP.CONNECTED,this.emit(o.n2.CONNECTED,{adapter:o.rW.OPENLOGIN,reconnected:!i})}}}}}]);